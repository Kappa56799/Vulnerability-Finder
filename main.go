/*
Author: Kacper Palka palka@kacper.boo
Description: A script which allows you to scan files/folders for vulnerabilities using OpenAI's GPT-4 model.
*/
package main

import (
  "fmt"
  "io/ioutil"
  "os"
  "path/filepath"  
  "encoding/json"  
  "github.com/go-resty/resty/v2"
)

type File_Data struct {
  File_Name string
  File_Path string
  File_Data string
}

var API_Key = os.Getenv("OPENAI_API_KEY")
const API_Endpoint = "https://api.openai.com/v1/chat/completions"

var data map[string]interface{}

func main() {
  var file_data []File_Data

  if len(os.Args) < 2 {
    fmt.Println("Please provide a folder or files to process.")
    return
  }

  outputFile, err := os.OpenFile("vulnerabilities_report.txt", os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
  if err != nil {
    fmt.Println("Error opening output file:", err)
    return
  }
  outputFile.Close()

  var files = os.Args[1:]

  for _, file := range files {
    File_Info, err := os.Stat(file)
    if err != nil {
      fmt.Println("Error reading file:", err)
      continue
    }

    if File_Info.IsDir() {
      err = filepath.Walk(file, func(path string, info os.FileInfo, err error) error {
        if err != nil {
          return err
        }
        if !info.IsDir() {
          readAndStoreFileData(path, &file_data)
        }
        return nil
      })

      if err != nil {
        fmt.Println("Error walking directory:", err)
      }
    } else {
      readAndStoreFileData(file, &file_data)
    }
  }

  Query_GPT(file_data)
}

func readAndStoreFileData(filePath string, fileData *[]File_Data) {
  data, err := ioutil.ReadFile(filePath)
  if err != nil {
    fmt.Println("Error reading file:", err)
    return
  }

  File_Info := File_Data{
    File_Name: filepath.Base(filePath),
    File_Path: filePath,
    File_Data: string(data),
  }

  *fileData = append(*fileData, File_Info)
}

func Query_GPT(fileData []File_Data){
  client := resty.New()

  for _, file := range fileData {
    input := file.File_Data  

    response, err := client.R().
      SetAuthToken(API_Key).
      SetHeader("Content-Type", "application/json").
      SetBody(map[string]interface{}{
        "model": "gpt-4",
        "messages": []interface{}{
          map[string]interface{}{
            "role": "user",
            "content": input,  
          },
        },
        "max_tokens": 3000,
      }).
      Post(API_Endpoint)

    if err != nil {
      fmt.Println("Error:", err)
      return
    }

    body := response.Body()
    err = json.Unmarshal(body, &data)

    if err != nil {
      fmt.Println("Error:", err)
      return 
    }

    content := data["choices"].([]interface{})[0].(map[string]interface{})["message"].(map[string]interface{})["content"].(string)
    outputFile, err := os.OpenFile("vulnerabilities_report.txt", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)
    if err != nil {
        fmt.Println("Error opening output file:", err)
        return
    }
    defer outputFile.Close()

    Show_Vulnerabilites(content, file, outputFile)
  }
}

func Show_Vulnerabilites(content string, file File_Data, outputFile *os.File) {
  result := "-----------------------------------------------------------------\n"
  result += fmt.Sprintf("Vulnerabilities for file: %s\n", file.File_Path)
  result += "-----------------------------------------------------------------\n"
  result += fmt.Sprintf("%s\n\n", content)

  fmt.Println(result)
  _, err := outputFile.WriteString(result)
  if err != nil {
      fmt.Println("Error writing to output file:", err)
  }
}

