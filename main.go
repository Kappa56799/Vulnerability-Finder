package main

import (
  "fmt"
  "io/ioutil"
  "os"
  "path/filepath"  
  "encoding/json"
  //"strings"
  "github.com/go-resty/resty/v2"
)

type File_Data struct {
  File_Name string
  File_Path string
  File_Data string
}

var API_Key = os.Getenv("OPENAI_API_KEY")
var data map[string]interface{}
const API_Endpoint = "https://api.openai.com/v1/chat/completions"

func main() {
  if len(os.Args) < 2 {
    fmt.Println("Please provide a folder or files to process.")
    return
  }
  
  var files = os.Args[1:]

  var file_data []File_Data

  for _, file := range files {
    fileInfo, err := os.Stat(file)
    if err != nil {
      fmt.Println("Error reading file:", err)
      continue
    }

    if fileInfo.IsDir() {
      err = filepath.Walk(file, func(path string, info os.FileInfo, err error) error {
        if err != nil {
          return err
        }
        if info.IsDir() {
          return nil
        }
        readAndStoreFileData(path, &file_data)
        return nil
      })
      if err != nil {
        fmt.Println("Error walking directory:", err)
      }
    } else {
      readAndStoreFileData(file, &file_data)
    }
  }
  printFileData(file_data)
  content := Query_GPT(file_data)
  fmt.Println(content)
}

func readAndStoreFileData(filePath string, fileData *[]File_Data) {
  data, err := ioutil.ReadFile(filePath)
  if err != nil {
    fmt.Println("Error reading file:", err)
    return
  }

  fileInfo := File_Data{
    File_Name: filepath.Base(filePath),
    File_Path: filePath,
    File_Data: string(data),
  }

  *fileData = append(*fileData, fileInfo)
}

func printFileData(fileData []File_Data) {
  for _, file := range fileData {
    fmt.Println("File Name:", file.File_Name)
  }
}


func Query_GPT(fileData []File_Data) string { 
  client := resty.New()

  for _, file := range fileData {
    input := file.File_Data  

    response, err := client.R().
      SetAuthToken(API_Key).
      SetHeader("Content-Type", "application/json").
      SetBody(map[string]interface{}{
        "model": "gpt-4",
        "messages": []interface{}{
          map[string]interface{}{
            "role": "user",
            "content": input,  
          },
        },
        "max_tokens": 1000,
      }).
      Post(API_Endpoint)

    if err != nil {
      fmt.Println("Error:", err)
      return ""
    }

    body := response.Body()
    err = json.Unmarshal(body, &data)

    if err != nil {
      fmt.Println("Error:", err)
      return ""
    }

    content := data["choices"].([]interface{})[0].(map[string]interface{})["message"].(map[string]interface{})["content"].(string)
  
    fmt.Println(content)
  }
  return "Done!"
}

